
Lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e9  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077a  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_data>:



void lcd_data(unsigned char data)
{
	PORTD = data;
  96:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | (1 << PB0); //RS = 1 
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & (~(1 << PB1)); //RW = 0
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB | (1 << PB2);   //EN = 1
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_data+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x1e>
  b4:	00 00       	nop
	_delay_ms(1);
	PORTB = PORTB & (~(1 << PB2)); //EN = 0
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret

000000be <lcd_cmd>:
	
}
 
void lcd_cmd(unsigned char command)
{
	PORTD = command;
  be:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB & (~(1 << PB0));   //RS = 0
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & (~(1 << PB1));   //RW = 0
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB | (1 << PB2);      //EN = 1
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_cmd+0x18>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_cmd+0x1e>
  dc:	00 00       	nop
	_delay_ms(1);
	PORTB = PORTB & (~(1 << PB2));   //EN = 0
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <lcd_string>:
	
}

void lcd_string(unsigned char *d)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	//char i = 0;
	
	while(*d)
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <lcd_string+0xe>
	{
		lcd_data(*d++);
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_data>

void lcd_string(unsigned char *d)
{
	//char i = 0;
	
	while(*d)
  f4:	88 81       	ld	r24, Y
  f6:	81 11       	cpse	r24, r1
  f8:	fa cf       	rjmp	.-12     	; 0xee <lcd_string+0x8>
	{
		lcd_data(*d++);
	}
	
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_init>:

void lcd_init()
{
	lcd_cmd(0x38);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_cmd>
	lcd_cmd(0x06);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_cmd>
	lcd_cmd(0x0c);
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_cmd>
	lcd_cmd(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_cmd>
 118:	08 95       	ret

0000011a <main>:



int main(void)
{
	DDRD = 0xff;  /* port D configured as output */
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRB = DDRB | (1 << DDB0) | (1 << DDB1) | (1 << DDB2); /* B0, B1, B2 of port B configured as output */
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	87 60       	ori	r24, 0x07	; 7
 122:	84 b9       	out	0x04, r24	; 4
    lcd_init();
 124:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
    while (1) 
    {
		
		lcd_cmd(0x80);
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_cmd>
		
		lcd_string("ritesh");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_string>
 136:	f8 cf       	rjmp	.-16     	; 0x128 <main+0xe>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
