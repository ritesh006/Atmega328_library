
LCD 4 BIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000957  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078d  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000403  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <lcd_cmd>:



void lcd_cmd(unsigned char command)
{
	PORTD = (command & 0xf0);
  80:	98 2f       	mov	r25, r24
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	9b b9       	out	0x0b, r25	; 11
	PORTB = PORTB | (1 << PB2);      //EN = 1
  86:	95 b1       	in	r25, 0x05	; 5
  88:	94 60       	ori	r25, 0x04	; 4
  8a:	95 b9       	out	0x05, r25	; 5
	PORTB = PORTB & (~(1 << PB1));   //RW = 0
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	9d 7f       	andi	r25, 0xFD	; 253
  90:	95 b9       	out	0x05, r25	; 5
	PORTB = PORTB & (~(1 << PB0));   //RS = 0
  92:	95 b1       	in	r25, 0x05	; 5
  94:	9e 7f       	andi	r25, 0xFE	; 254
  96:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	ef e9       	ldi	r30, 0x9F	; 159
  9a:	ff e0       	ldi	r31, 0x0F	; 15
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_cmd+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_cmd+0x22>
  a2:	00 00       	nop
	_delay_ms(1);
	PORTB = PORTB & (~(1 << PB2));   //EN = 0
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	9b 7f       	andi	r25, 0xFB	; 251
  a8:	95 b9       	out	0x05, r25	; 5
	
	PORTD = ((command << 4) & 0xf0);
  aa:	f0 e1       	ldi	r31, 0x10	; 16
  ac:	8f 9f       	mul	r24, r31
  ae:	c0 01       	movw	r24, r0
  b0:	11 24       	eor	r1, r1
  b2:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | (1 << PB2);      //EN = 1
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & (~(1 << PB1));   //RW = 0
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & (~(1 << PB0));   //RS = 0
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_cmd+0x4a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_cmd+0x50>
  d0:	00 00       	nop
	_delay_ms(1);
	PORTB = PORTB & (~(1 << PB2));   //EN = 0
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8b 7f       	andi	r24, 0xFB	; 251
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret

000000da <lcd_data>:
}


void lcd_data(unsigned char data)
{
	PORTD = (data & 0xf0);
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	9b b9       	out	0x0b, r25	; 11
	PORTB = PORTB | (1 << PB2);      //EN = 1
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	94 60       	ori	r25, 0x04	; 4
  e4:	95 b9       	out	0x05, r25	; 5
	PORTB = PORTB & (~(1 << PB1));   //RW = 0
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	9d 7f       	andi	r25, 0xFD	; 253
  ea:	95 b9       	out	0x05, r25	; 5
	PORTB = PORTB | (1 << PB0);		 //Rs = 1
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	95 b9       	out	0x05, r25	; 5
  f2:	ef e3       	ldi	r30, 0x3F	; 63
  f4:	fc e9       	ldi	r31, 0x9C	; 156
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_data+0x22>
  fc:	00 00       	nop
	_delay_ms(10);
	PORTB = PORTB & (~(1 << PB2));   //EN = 0
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	9b 7f       	andi	r25, 0xFB	; 251
 102:	95 b9       	out	0x05, r25	; 5
	
	PORTD = ((data << 4) & 0xf0);
 104:	f0 e1       	ldi	r31, 0x10	; 16
 106:	8f 9f       	mul	r24, r31
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | (1 << PB2);      //EN = 1
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	84 60       	ori	r24, 0x04	; 4
 112:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & (~(1 << PB1));   //RW = 0
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB | (1 << PB0);		 //RS = 1
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 b9       	out	0x05, r24	; 5
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_data+0x4a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_data+0x50>
 12a:	00 00       	nop
	_delay_ms(10);
	PORTB = PORTB & (~(1 << PB2));   //EN = 0
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <lcd_init>:
}


void lcd_init()
{
	lcd_cmd(0x38);
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	0e 94 40 00 	call	0x80	; 0x80 <lcd_cmd>
	lcd_cmd(0x06);
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 40 00 	call	0x80	; 0x80 <lcd_cmd>
	lcd_cmd(0x0c);
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 40 00 	call	0x80	; 0x80 <lcd_cmd>
	lcd_cmd(0x01);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 40 00 	call	0x80	; 0x80 <lcd_cmd>
 14c:	08 95       	ret

0000014e <main>:
void lcd_init();


int main(void)
{
	DDRD = 0xf0;  /* port D configured as output */
 14e:	80 ef       	ldi	r24, 0xF0	; 240
 150:	8a b9       	out	0x0a, r24	; 10
	DDRB = DDRB | (1 << DDB0) | (1 << DDB1) | (1 << DDB2); /* B0, B1, B2 of port B configured as output */
 152:	84 b1       	in	r24, 0x04	; 4
 154:	87 60       	ori	r24, 0x07	; 7
 156:	84 b9       	out	0x04, r24	; 4
	lcd_init();
 158:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_init>
	while (1)
	{
		
		lcd_cmd(0x80);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 40 00 	call	0x80	; 0x80 <lcd_cmd>
		
		//lcd_string("ritesh");
		lcd_data('a');
 162:	81 e6       	ldi	r24, 0x61	; 97
 164:	0e 94 6d 00 	call	0xda	; 0xda <lcd_data>
 168:	f9 cf       	rjmp	.-14     	; 0x15c <main+0xe>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
